
import java.sql.*;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class DogFrame extends javax.swing.JFrame {
    
    private PreparedStatement selectAllDogs;
    private Connection connection;

    public DogFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dogTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnLoadAllDogs = new javax.swing.JButton();
        btnSearchForADog = new javax.swing.JButton();
        btnInsertADog = new javax.swing.JButton();
        btnUpdateADog = new javax.swing.JButton();
        btnDeleteADog = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("DOG DATABASE");

        dogTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "DogID", "Name", "Age", "Breed", "Weight", "Height", "Food", "Care", "Product"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        dogTable.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(dogTable);
        dogTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (dogTable.getColumnModel().getColumnCount() > 0) {
            dogTable.getColumnModel().getColumn(0).setResizable(false);
        }

        btnLoadAllDogs.setBackground(new java.awt.Color(102, 102, 255));
        btnLoadAllDogs.setText("Load All Dogs");
        btnLoadAllDogs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadAllDogsActionPerformed(evt);
            }
        });

        btnSearchForADog.setBackground(new java.awt.Color(102, 102, 255));
        btnSearchForADog.setText("Search For a Dog");
        btnSearchForADog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchForADogActionPerformed(evt);
            }
        });

        btnInsertADog.setBackground(new java.awt.Color(102, 102, 255));
        btnInsertADog.setText("Insert a Dog");
        btnInsertADog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertADogActionPerformed(evt);
            }
        });

        btnUpdateADog.setBackground(new java.awt.Color(102, 102, 255));
        btnUpdateADog.setText("Update a Dog");
        btnUpdateADog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateADogActionPerformed(evt);
            }
        });

        btnDeleteADog.setBackground(new java.awt.Color(102, 102, 255));
        btnDeleteADog.setText("Delete a Dog");
        btnDeleteADog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteADogActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDeleteADog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnInsertADog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSearchForADog))
                    .addComponent(btnUpdateADog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLoadAllDogs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnLoadAllDogs)
                .addGap(32, 32, 32)
                .addComponent(btnSearchForADog)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(btnInsertADog)
                .addGap(27, 27, 27)
                .addComponent(btnUpdateADog)
                .addGap(26, 26, 26)
                .addComponent(btnDeleteADog)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(280, 280, 280))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateADogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateADogActionPerformed
        // TODO add your handling code here:
        UpdateDogFrame udf = new UpdateDogFrame();
        udf.setVisible(true);
    }//GEN-LAST:event_btnUpdateADogActionPerformed

    private void btnSearchForADogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchForADogActionPerformed
        // TODO add your handling code here:
        SearchDogFrame sdf = new SearchDogFrame();
        sdf.setVisible(true);
    }//GEN-LAST:event_btnSearchForADogActionPerformed

    private void btnInsertADogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertADogActionPerformed
        // TODO add your handling code here:
        InsertDogFrame idf = new InsertDogFrame();
        idf.setVisible(true);
    }//GEN-LAST:event_btnInsertADogActionPerformed

    private void btnDeleteADogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteADogActionPerformed
        // TODO add your handling code here:
        DeleteDogFrame ddf = new DeleteDogFrame();
        ddf.setVisible(true);
    }//GEN-LAST:event_btnDeleteADogActionPerformed

    private void btnLoadAllDogsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadAllDogsActionPerformed
        // TODO add your handling code here:
        connection = DogQueries.getConnection();
        if(connection != null) {
            try {
                selectAllDogs =
                    connection.prepareStatement("SELECT * FROM dogTable ORDER BY dogId", 
                            ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                ResultSet rs = selectAllDogs.executeQuery();
                if(rs.next()) {
                    rs.previous();
                     ResultSetMetaData metaData = rs.getMetaData();
                
                    DefaultTableModel df = (DefaultTableModel) dogTable.getModel();
                    df.setRowCount(0);
                    while(rs.next()) {
                        Vector v = new Vector();
                        for(int i = 1; i <= metaData.getColumnCount(); i++) {
                            v.add(rs.getInt("dogId"));
                            v.add(rs.getString("dname"));
                            v.add(rs.getInt("dage"));
                            v.add(rs.getString("dbreed"));
                            v.add(rs.getDouble("dweight"));
                            v.add(rs.getDouble("dheight"));
                            v.add(rs.getString("dfood"));
                            v.add(rs.getString("dcare"));
                            v.add(rs.getString("dproduct"));
                        }
                        df.addRow(v);
                    }
                    JOptionPane.showMessageDialog(this, "LOADING COMPLETE");
                } else {
                    JOptionPane.showMessageDialog(this, "DATABASE IS EMPTY");
                }
                connection.close();
            }catch(SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        } else {
            System.out.println("Connection failed");
            System.exit(1);
        }
    }//GEN-LAST:event_btnLoadAllDogsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DogFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DogFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DogFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DogFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DogFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteADog;
    private javax.swing.JButton btnInsertADog;
    private javax.swing.JButton btnLoadAllDogs;
    private javax.swing.JButton btnSearchForADog;
    private javax.swing.JButton btnUpdateADog;
    private javax.swing.JTable dogTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
